{"version":3,"sources":["enums.ts","controls.tsx","canvas.tsx","preset-options.ts","presets.tsx","app.tsx","index.tsx"],"names":["Colors","ColorFields","Shape","ColorControl","rgbValue","color","handleColorChanged","className","style","backgroundColor","r","g","b","Object","values","map","colorField","ColorFieldControl","colorValue","fieldValue","toUpperCase","type","min","max","value","onChange","e","Controls","mouseRadius","baseColor","highlightColor","handleMouseRadiusChanged","showMouseRadius","handleShowMouseRadiusChecked","minSize","maxSize","handleMinSizeChanged","handleMaxSizeChanged","numParticles","handleNumParticlesChanged","checked","BaseColor","HighlightColor","Canvas","canvasElement","useRef","requestRef","useState","x","undefined","y","mouse","setMouse","getContext","useCallback","current","particles","setParticles","onMouseMove","event","onMouseOut","onResize","width","window","innerWidth","height","innerHeight","useEffect","addEventListener","removeEventListener","drawMouse","context","beginPath","arc","Math","PI","strokeStyle","stroke","animate","requestAnimationFrame","clearRect","forEach","particle","update","cancelAnimationFrame","generateParticles","canvas","newParticles","i","push","generateParticle","updateSize","id","ref","Particle","random","round","Circle","PresetNames","dx","dy","shape","size","mousedOver","mouseDistance","this","Infinity","a","hypot","Square","rect","fillStyle","fill","checkIsMousedOver","grow","updateColor","move","draw","presetOptions","Fog","Bubblegum","BubbleBath","Slime","PartiallyCloudy","Explosion","SnowFlurries","defaultPreset","Presets","handlePresetClicked","presetName","onClick","App","setMouseRadius","setShowMouseRadius","setBaseColor","setHighlightColor","setMinSize","setMaxSize","setNumParticles","parseInt","target","console","log","preset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0e58a52.chunk.js","sourcesContent":["export enum Colors {\n    BaseColor = 'Base Color',\n    HighlightColor = 'Highlight Color',\n}\n\nexport enum ColorFields {\n    red = 'r',\n    green = 'g',\n    blue = 'b',\n}\n\nexport enum Shape {\n    Circle = 'Circle',\n    Square = 'Square',\n}\n","import React from 'react';\nimport { RGBValue, SliderEvent } from './types';\nimport { Colors, ColorFields } from './enums';\nimport './controls.scss';\n\ntype ControlsProps = {\n    mouseRadius: number;\n    handleMouseRadiusChanged: SliderEvent;\n\n    showMouseRadius: boolean;\n    handleShowMouseRadiusChecked: SliderEvent;\n\n    baseColor: RGBValue;\n    highlightColor: RGBValue;\n    handleColorChanged: (\n        e: React.ChangeEvent<HTMLInputElement>,\n        color: Colors,\n        field: ColorFields\n    ) => void;\n\n    minSize: number;\n    maxSize: number;\n    handleMinSizeChanged: SliderEvent;\n    handleMaxSizeChanged: SliderEvent;\n\n    numParticles: number;\n    handleNumParticlesChanged: SliderEvent;\n};\n\nfunction Controls({\n    mouseRadius,\n    baseColor,\n    highlightColor,\n    handleMouseRadiusChanged,\n    showMouseRadius,\n    handleShowMouseRadiusChecked,\n    handleColorChanged,\n    minSize,\n    maxSize,\n    handleMinSizeChanged,\n    handleMaxSizeChanged,\n    numParticles,\n    handleNumParticlesChanged,\n}: ControlsProps) {\n    return (\n        <div className='controls__wrapper'>\n            <div className='controls'>\n                <div className='controls__item'>\n                    <label>Mouse Radius ({mouseRadius}px)</label>\n                    <input\n                        type='range'\n                        min='20'\n                        max='200'\n                        value={mouseRadius}\n                        className='mouse-radius-slider'\n                        onChange={handleMouseRadiusChanged}\n                    />\n                    <label>Show Mouse Radius</label>\n                    <input\n                        type='checkbox'\n                        checked={showMouseRadius}\n                        onChange={handleShowMouseRadiusChecked}\n                    />\n                </div>\n\n                <div className='controls__item'>\n                    <ColorControl\n                        rgbValue={baseColor}\n                        color={Colors.BaseColor}\n                        handleColorChanged={handleColorChanged}\n                    />\n                </div>\n                <div className='controls__item'>\n                    <ColorControl\n                        rgbValue={highlightColor}\n                        color={Colors.HighlightColor}\n                        handleColorChanged={handleColorChanged}\n                    />\n                </div>\n\n                <div className='controls__item'>\n                    <label>Min Size ({minSize}px)</label>\n                    <input\n                        type='range'\n                        min='0'\n                        max={maxSize - 1}\n                        value={minSize}\n                        className='min-size-slider'\n                        onChange={handleMinSizeChanged}\n                    />\n                </div>\n\n                <div className='controls__item'>\n                    <label>Max Size ({maxSize}px)</label>\n                    <input\n                        type='range'\n                        min={minSize + 1}\n                        max={100}\n                        value={maxSize}\n                        className='max-size-slider'\n                        onChange={handleMaxSizeChanged}\n                    />\n                </div>\n\n                <div className='controls__item'>\n                    <label>Number of Particles ({numParticles})</label>\n                    <input\n                        type='range'\n                        min={1}\n                        max={10000}\n                        value={numParticles}\n                        className='num-particles-slider'\n                        onChange={handleNumParticlesChanged}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\ntype ColorControlProps = {\n    rgbValue: RGBValue;\n    color: Colors;\n    handleColorChanged: (\n        e: React.ChangeEvent<HTMLInputElement>,\n        color: Colors,\n        field: ColorFields\n    ) => void;\n};\n\nfunction ColorControl({\n    rgbValue,\n    color,\n    handleColorChanged,\n}: ColorControlProps) {\n    return (\n        <div className='color-control'>\n            <div className='color-control__header'>\n                <span className='color-control__name'>{color}</span>{' '}\n                <div\n                    className='color-control__sample'\n                    style={{\n                        backgroundColor: `rgb(${rgbValue.r},${rgbValue.g},${rgbValue.b})`,\n                    }}\n                />\n            </div>\n            {Object.values(ColorFields).map((colorField) => (\n                <ColorFieldControl\n                    colorValue={rgbValue}\n                    color={color}\n                    colorField={colorField}\n                    handleColorChanged={handleColorChanged}\n                    key={`${color}--${colorField}`}\n                />\n            ))}\n        </div>\n    );\n}\n\ntype ColorFieldControlProps = {\n    colorValue: RGBValue;\n    color: Colors;\n    colorField: ColorFields;\n    handleColorChanged: (\n        e: React.ChangeEvent<HTMLInputElement>,\n        color: Colors,\n        field: ColorFields\n    ) => void;\n};\n\nfunction ColorFieldControl({\n    colorValue,\n    color,\n    colorField,\n    handleColorChanged,\n}: ColorFieldControlProps) {\n    const fieldValue = colorValue[colorField];\n    return (\n        <div className='color-field-control'>\n            <label className='color-field-control__label'>\n                {colorField.toUpperCase()}: {fieldValue}\n            </label>\n            <input\n                type='range'\n                min='0'\n                max='255'\n                value={fieldValue}\n                className='color-field-control__slider'\n                onChange={(e) => handleColorChanged(e, color, colorField)}\n            />\n        </div>\n    );\n}\n\nexport default Controls;\n","import { useState, useEffect, useCallback, useRef } from 'react';\nimport { RGBValue } from './types';\nimport { Shape } from './enums';\n\ntype CanvasProps = {\n    mouseRadius: number;\n    showMouseRadius: boolean;\n    baseColor: RGBValue;\n    highlightColor: RGBValue;\n    minSize: number;\n    maxSize: number;\n    numParticles: number;\n};\n\ntype MousePosition = {\n    x?: number;\n    y?: number;\n};\n\nfunction Canvas({\n    mouseRadius,\n    showMouseRadius,\n    baseColor,\n    highlightColor,\n    minSize,\n    maxSize,\n    numParticles,\n}: CanvasProps) {\n    const canvasElement = useRef<HTMLCanvasElement>(null);\n    const requestRef = useRef(0);\n\n    const [mouse, setMouse] = useState<MousePosition>({\n        x: undefined,\n        y: undefined,\n    });\n\n    const getContext = useCallback(() => {\n        if (canvasElement && canvasElement.current) {\n            return canvasElement.current.getContext('2d');\n        }\n    }, [canvasElement]);\n\n    const [particles, setParticles] = useState<Particle[]>([]);\n\n    const onMouseMove = (event: { x: number; y: number }) => {\n        setMouse({ x: event.x - 50, y: event.y - 100 });\n    };\n\n    const onMouseOut = useCallback(() => {\n        setMouse({ x: undefined, y: undefined });\n    }, []);\n\n    const onResize = useCallback(() => {\n        if (canvasElement && canvasElement.current) {\n            canvasElement.current.width = window.innerWidth - 100;\n            canvasElement.current.height = window.innerHeight - 150;\n        }\n    }, []);\n\n    useEffect(() => {\n        if (canvasElement && canvasElement.current) {\n            canvasElement.current.addEventListener('mousemove', onMouseMove);\n            canvasElement.current.addEventListener('mouseout', onMouseOut);\n            window.addEventListener('resize', onResize);\n        }\n        return () => {\n            if (canvasElement && canvasElement.current) {\n                canvasElement.current.removeEventListener(\n                    'mousemove',\n                    onMouseMove\n                );\n                canvasElement.current.removeEventListener(\n                    'mouseout',\n                    onMouseOut\n                );\n                window.removeEventListener('resize', onResize);\n            }\n        };\n    }, [canvasElement, onMouseOut]);\n\n    const drawMouse = useCallback(() => {\n        const context = getContext();\n        if (context && mouse.x && mouse.y) {\n            context.beginPath();\n            context.arc(mouse.x, mouse.y, mouseRadius, 0, 2 * Math.PI);\n            context.strokeStyle = '#000';\n            context.stroke();\n        }\n    }, [mouse, mouseRadius]);\n\n    const animate = useCallback(() => {\n        requestRef.current = requestAnimationFrame(animate);\n        const context = getContext();\n        if (canvasElement && canvasElement.current && context) {\n            context.clearRect(\n                0,\n                0,\n                canvasElement.current.width,\n                canvasElement.current.height\n            );\n            particles.forEach((particle) =>\n                particle.update(\n                    context,\n                    mouse,\n                    mouseRadius,\n                    canvasElement.current,\n                    baseColor,\n                    highlightColor\n                )\n            );\n        }\n        if (showMouseRadius) {\n            drawMouse();\n        }\n    }, [\n        particles,\n        getContext,\n        baseColor,\n        highlightColor,\n        mouse,\n        mouseRadius,\n        showMouseRadius,\n        drawMouse,\n    ]);\n\n    useEffect(() => {\n        requestRef.current = requestAnimationFrame(animate);\n        return () => cancelAnimationFrame(requestRef.current);\n    });\n\n    const generateParticles = () => {\n        const canvas = canvasElement.current;\n        if (canvas) {\n            canvas.width = window.innerWidth - 100;\n            canvas.height = window.innerHeight - 150;\n            const newParticles: Particle[] = [];\n            for (let i = 0; i < numParticles; i++) {\n                newParticles.push(\n                    generateParticle(\n                        canvas.width,\n                        canvas.height,\n                        minSize,\n                        maxSize\n                    )\n                );\n            }\n            setParticles(newParticles);\n        }\n    };\n\n    useEffect(() => {\n        generateParticles();\n    }, []);\n\n    useEffect(() => {\n        particles.forEach((particle) => particle.updateSize(minSize, maxSize));\n    }, [minSize, maxSize]);\n\n    useEffect(() => {\n        generateParticles();\n    }, [numParticles]);\n\n    return <canvas id='canvas' ref={canvasElement}></canvas>;\n}\n\nexport default Canvas;\n\nfunction generateParticle(\n    width: number,\n    height: number,\n    minSize: number,\n    maxSize: number\n) {\n    return new Particle(\n        Math.random() * width,\n        Math.random() * height,\n        (Math.round(Math.random()) * 2 - 1) * Math.random(),\n        (Math.round(Math.random()) * 2 - 1) * Math.random(),\n        'black',\n        minSize,\n        maxSize,\n        Shape.Circle\n    );\n}\n\nclass Particle {\n    x: number;\n    y: number;\n    dx: number;\n    dy: number;\n    size: number;\n    color: string;\n    minSize: number;\n    maxSize: number;\n    mousedOver: boolean;\n    mouseDistance: number;\n    shape: Shape;\n\n    constructor(\n        x: number,\n        y: number,\n        dx: number,\n        dy: number,\n        color: string,\n        minSize: number,\n        maxSize: number,\n        shape: Shape\n    ) {\n        this.x = x;\n        this.y = y;\n        this.dx = dx;\n        this.dy = dy;\n        this.size = minSize;\n        this.color = color;\n        this.minSize = minSize;\n        this.maxSize = maxSize;\n        this.mousedOver = false;\n        this.mouseDistance = Infinity;\n        this.shape = shape;\n    }\n\n    checkIsMousedOver(mouse: MousePosition, mouseRadius: number) {\n        if (!mouse.x || !mouse.y) {\n            this.mousedOver = false;\n            return;\n        }\n        const a = mouse.x - this.x;\n        const b = mouse.y - this.y;\n        this.mouseDistance = Math.hypot(a, b);\n        this.mousedOver = this.mouseDistance < mouseRadius;\n    }\n\n    move(canvas: HTMLCanvasElement | null) {\n        if (canvas) {\n            if (this.x < 0 || this.x > canvas.width) this.dx = -this.dx;\n            if (this.y < 0 || this.y > canvas.height) this.dy = -this.dy;\n\n            this.x += this.dx;\n            this.y += this.dy;\n        }\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        if (this.mousedOver || this.size > 0) {\n            context.beginPath();\n            switch (this.shape) {\n                case Shape.Circle:\n                    context.arc(\n                        this.x,\n                        this.y,\n                        this.size,\n                        0,\n                        2 * Math.PI,\n                        false\n                    );\n                    break;\n                case Shape.Square:\n                    context.rect(\n                        this.x - this.size / 2,\n                        this.y - this.size / 2,\n                        this.size,\n                        this.size\n                    );\n                    break;\n            }\n            context.fillStyle = this.color;\n            context.fill();\n        }\n    }\n\n    grow() {\n        if (this.size < this.maxSize && this.mousedOver) {\n            this.size = Math.min(\n                this.maxSize,\n                this.size + 70 / this.mouseDistance\n            );\n        } else if (!this.mousedOver && this.size > this.minSize) {\n            this.size = Math.max(this.minSize, this.size - 0.5);\n        }\n    }\n\n    updateColor(baseColor: RGBValue, highlightColor: RGBValue) {\n        const r =\n            (this.size - this.minSize) *\n                (((highlightColor.r - baseColor.r) * 1) /\n                    (this.maxSize - this.minSize)) +\n            baseColor.r;\n        const g =\n            (this.size - this.minSize) *\n                (((highlightColor.g - baseColor.g) * 1) /\n                    (this.maxSize - this.minSize)) +\n            baseColor.g;\n        const b =\n            (this.size - this.minSize) *\n                (((highlightColor.b - baseColor.b) * 1) /\n                    (this.maxSize - this.minSize)) +\n            baseColor.b;\n        this.color = `rgb(${r}, ${g}, ${b})`;\n    }\n\n    updateSize(minSize: number, maxSize: number) {\n        this.minSize = minSize;\n        this.maxSize = maxSize;\n        if (this.size < minSize) {\n            this.size = minSize;\n        }\n    }\n\n    update(\n        context: CanvasRenderingContext2D,\n        mouse: MousePosition,\n        mouseRadius: number,\n        canvas: HTMLCanvasElement | null,\n        baseColor: RGBValue,\n        highlightColor: RGBValue\n    ) {\n        this.checkIsMousedOver(mouse, mouseRadius);\n        this.grow();\n        this.updateColor(baseColor, highlightColor);\n        this.move(canvas);\n        this.draw(context);\n    }\n}\n","import { PresetList } from './types';\n\nexport enum PresetNames {\n    Fog = 'Fog',\n    Bubblegum = 'Bubblegum',\n    Slime = 'Slime',\n    BubbleBath = 'Bubble Bath',\n    PartiallyCloudy = 'Partially Cloudy',\n    Explosion = 'Explosion',\n    SnowFlurries = 'Snow Flurries',\n}\n\nconst presetOptions: PresetList = {\n    [PresetNames.Fog]: {\n        baseColor: {\n            r: 23,\n            g: 32,\n            b: 56,\n        },\n        highlightColor: {\n            r: 164,\n            g: 221,\n            b: 219,\n        },\n        minSize: 0,\n        maxSize: 35,\n        numParticles: 1000,\n    },\n    [PresetNames.Bubblegum]: {\n        baseColor: {\n            r: 255,\n            g: 255,\n            b: 255,\n        },\n        highlightColor: {\n            r: 255,\n            g: 202,\n            b: 223,\n        },\n        minSize: 0,\n        maxSize: 60,\n        numParticles: 500,\n    },\n    [PresetNames.BubbleBath]: {\n        baseColor: {\n            r: 176,\n            g: 222,\n            b: 255,\n        },\n        highlightColor: {\n            r: 248,\n            g: 248,\n            b: 255,\n        },\n        minSize: 0,\n        maxSize: 40,\n        numParticles: 1000,\n    },\n    [PresetNames.Slime]: {\n        baseColor: {\n            r: 71,\n            g: 255,\n            b: 58,\n        },\n        highlightColor: {\n            r: 21,\n            g: 57,\n            b: 35,\n        },\n        minSize: 0,\n        maxSize: 100,\n        numParticles: 3000,\n    },\n    [PresetNames.PartiallyCloudy]: {\n        baseColor: {\n            r: 255,\n            g: 255,\n            b: 255,\n        },\n        highlightColor: {\n            r: 255,\n            g: 222,\n            b: 79,\n        },\n        minSize: 50,\n        maxSize: 100,\n        numParticles: 500,\n    },\n    [PresetNames.Explosion]: {\n        baseColor: {\n            r: 255,\n            g: 0,\n            b: 87,\n        },\n        highlightColor: {\n            r: 255,\n            g: 255,\n            b: 0,\n        },\n        minSize: 0,\n        maxSize: 50,\n        numParticles: 1000,\n    },\n    [PresetNames.SnowFlurries]: {\n        baseColor: {\n            r: 225,\n            g: 240,\n            b: 255,\n        },\n        highlightColor: {\n            r: 217,\n            g: 217,\n            b: 255,\n        },\n        minSize: 2,\n        maxSize: 5,\n        numParticles: 3000,\n    },\n};\n\nexport const defaultPreset = PresetNames.Fog;\n\nexport default presetOptions;\n","import { PresetNames } from './preset-options';\nimport './presets.scss';\n\nfunction Presets({ handlePresetClicked }) {\n    return (\n        <div className='presets'>\n            <span className='presets__title'>Presets</span>\n            {Object.values(PresetNames).map((presetName) => (\n                <button\n                    className='presets__button'\n                    key={presetName}\n                    onClick={() => handlePresetClicked(presetName)}\n                >\n                    {presetName}\n                </button>\n            ))}\n        </div>\n    );\n}\n\nexport default Presets;\n","import React, { useState } from 'react';\nimport Controls from './controls';\nimport Canvas from './canvas';\nimport Presets from './presets';\nimport { RGBValue } from './types';\nimport { Colors, ColorFields } from './enums';\nimport presetOptions, { defaultPreset } from './preset-options';\nimport './app.scss';\n\nfunction App() {\n    const [mouseRadius, setMouseRadius] = useState(80);\n    const handleMouseRadiusChanged = (\n        e: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setMouseRadius(parseInt(e.target.value));\n    };\n\n    const [showMouseRadius, setShowMouseRadius] = useState(false);\n    const handleShowMouseRadiusChecked = () => {\n        setShowMouseRadius(!showMouseRadius);\n    };\n\n    const [baseColor, setBaseColor] = useState<RGBValue>(\n        presetOptions[defaultPreset].baseColor\n    );\n\n    const [highlightColor, setHighlightColor] = useState<RGBValue>(\n        presetOptions[defaultPreset].highlightColor\n    );\n\n    const handleColorChanged = (\n        e: React.ChangeEvent<HTMLInputElement>,\n        color: Colors,\n        colorField: ColorFields\n    ) => {\n        console.log(color === Colors.BaseColor);\n        if (color === Colors.BaseColor) {\n            setBaseColor({\n                ...baseColor,\n                [colorField]: parseInt(e.target.value),\n            });\n        } else if (color === Colors.HighlightColor) {\n            setHighlightColor({\n                ...highlightColor,\n                [colorField]: parseInt(e.target.value),\n            });\n        }\n    };\n\n    const [minSize, setMinSize] = useState(\n        presetOptions[defaultPreset].minSize\n    );\n    const [maxSize, setMaxSize] = useState(\n        presetOptions[defaultPreset].maxSize\n    );\n    const handleMinSizeChanged = (\n        e: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        setMinSize(parseInt(e.target.value));\n    };\n    const handleMaxSizeChanged = (\n        e: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        setMaxSize(parseInt(e.target.value));\n    };\n\n    const [numParticles, setNumParticles] = useState(\n        presetOptions[defaultPreset].numParticles\n    );\n    const handleNumParticlesChanged = (\n        e: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        setNumParticles(parseInt(e.target.value));\n    };\n\n    const handlePresetClicked = (presetName: string) => {\n        const preset = presetOptions[presetName];\n        setBaseColor(preset.baseColor);\n        setHighlightColor(preset.highlightColor);\n        setMinSize(preset.minSize);\n        setMaxSize(preset.maxSize);\n        setNumParticles(preset.numParticles);\n    };\n\n    return (\n        <div className='app'>\n            <Controls\n                mouseRadius={mouseRadius}\n                handleMouseRadiusChanged={handleMouseRadiusChanged}\n                showMouseRadius={showMouseRadius}\n                handleShowMouseRadiusChecked={handleShowMouseRadiusChecked}\n                baseColor={baseColor}\n                highlightColor={highlightColor}\n                handleColorChanged={handleColorChanged}\n                minSize={minSize}\n                maxSize={maxSize}\n                handleMinSizeChanged={handleMinSizeChanged}\n                handleMaxSizeChanged={handleMaxSizeChanged}\n                numParticles={numParticles}\n                handleNumParticlesChanged={handleNumParticlesChanged}\n            />\n            <Canvas\n                mouseRadius={mouseRadius}\n                showMouseRadius={showMouseRadius}\n                baseColor={baseColor}\n                highlightColor={highlightColor}\n                minSize={minSize}\n                maxSize={maxSize}\n                numParticles={numParticles}\n            />\n            <Presets handlePresetClicked={handlePresetClicked} />\n        </div>\n    );\n}\n\nexport default App;\n\nconst colors = [\n    '#172038',\n    '#253a5e',\n    '#3c5e8b',\n    '#4f8fba',\n    '#73bed3',\n    '#a4dddb',\n    '#19332d',\n    '#25562e',\n    '#468232',\n    '#75a743',\n    '#a8ca58',\n    '#d0da91',\n    '#4d2b32',\n    '#7a4841',\n    '#ad7757',\n    '#c09473',\n    '#d7b594',\n    '#e7d5b3',\n    '#341c27',\n    '#602c2c',\n    '#884b2b',\n    '#be772b',\n    '#de9e41',\n    '#e8c170',\n    '#241527',\n    '#411d31',\n    '#752438',\n    '#a53030',\n    '#cf573c',\n    '#da863e',\n    '#1e1d39',\n    '#402751',\n    '#7a367b',\n    '#a23e8c',\n    '#c65197',\n    '#df84a5',\n    '#090a14',\n    '#10141f',\n    '#151d28',\n    '#202e37',\n    '#394a50',\n    '#577277',\n    '#819796',\n    '#a8b5b2',\n    '#c7cfcc',\n    '#ebede9',\n];\nconst blues = [\n    '#172038',\n    '#253a5e',\n    '#3c5e8b',\n    '#4f8fba',\n    '#73bed3',\n    '#a4dddb',\n];\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}